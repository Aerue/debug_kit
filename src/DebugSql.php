<?php
namespace DebugKit;

use Cake\Core\Configure;
use Cake\Error\Debugger;
use Cake\ORM\Query;
use SqlFormatter;

/**
 * Contains methods for dumping well formatted SQL queries.
 */
class DebugSql
{
    /**
     * @var string
     */
    private static $template = '<div class="cake-debug-output">%s<pre class="cake-debug">%s</pre></div>';

    /**
     * Prints out the SQL statements generated by a Query object.
     *
     * This function returns the same variable that was passed.
     * Only runs if debug mode is enabled.
     *
     * @param Query $query Query to show SQL statements for.
     * @param bool $showValues Renders the SQL statement with bound variables.
     * @return Query
     */
    public static function sql(Query $query, $showValues = true, $stackDepth = 0)
    {
        if (!Configure::read('debug')) {
            return $query;
        }

        $sql = $showValues
            ? static::interpolate((string)$query, $query->getValueBinder()->bindings())
            : (string)$query;

        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg' || !class_exists('SqlFormatter')) {
            dd($sql);
        }

        $trace = Debugger::trace(['start' => 1, 'depth' => $stackDepth + 2, 'format' => 'array']);
        $lineInfo = sprintf(
            '<span><strong>%s</strong> (line <strong>%s</strong>)</span>',
            $trace[$stackDepth]['file'],
            $trace[$stackDepth]['line']
        );

        $formatted = SqlFormatter::format($sql);
        $formatted = str_replace(
            '<span >:</span> <span style="color: #333;">',
            '<span >:</span><span style="color: #333;">',
            $formatted
        );

        printf(static::$template, $lineInfo, $formatted);

        return $query;
    }

    /**
     * Prints out the SQL statements generated by a Query object and dies.
     *
     * Only runs if debug mode is enabled.
     * It will otherwise just continue code execution and ignore this function.
     *
     * @param Query $query Query to show SQL statements for.
     * @param bool $showValues Renders the SQL statement with bound variables.
     * @return void
     */
    public static function sqld(Query $query, $showValues = true, $stackDepth = 1)
    {
        static::sql($query, $showValues, $stackDepth);
        die(1);
    }

    /**
     * Helper function used to replace query placeholders by the real
     * params used to execute the query.
     *
     * @param string $sql The SQL statement
     * @param array $bindings The Query bindings
     * @return string
     */
    private static function interpolate($sql, array $bindings)
    {
        $params = array_map(function ($binding) {
            $p = $binding['value'];

            if ($p === null) {
                return 'NULL';
            }
            if (is_bool($p)) {
                return $p ? '1' : '0';
            }

            if (is_string($p)) {
                $replacements = [
                    '$' => '\\$',
                    '\\' => '\\\\\\\\',
                    "'" => "''",
                ];

                $p = strtr($p, $replacements);

                return "'$p'";
            }

            return $p;
        }, $bindings);

        $keys = [];
        $limit = is_int(key($params)) ? 1 : -1;
        foreach ($params as $key => $param) {
            $keys[] = is_string($key) ? "/$key\b/" : '/[?]/';
        }

        return preg_replace($keys, $params, $sql, $limit);
    }
}